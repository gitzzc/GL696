#include <stdio.h>
#include <string.h>

#include "stm32f10x.h"

#include "tlv5614.h"
#include "spi.h"

#define TLV5614_BSRR	GPIOB->BSRR
#define TLV5614_NCS		GPIO_Pin_11
#define TLV5614_FS		GPIO_Pin_10

#define TLV5614_NLADC_BSRR	GPIOE->BSRR
#define TLV5614_NLADC	GPIO_Pin_15

#define TLV5614_CS_EN()		TLV5614_BSRR = ((uint32_t)TLV5614_NCS<<16)
#define TLV5614_CS_DIS()	TLV5614_BSRR = TLV5614_NCS

#define TLV5614_FS_LOW()	TLV5614_BSRR = ((uint32_t)TLV5614_FS<<16)
#define TLV5614_FS_HIGH()	TLV5614_BSRR = TLV5614_FS

#define TLV5614_NLDAC_EN()	TLV5614_NLADC_BSRR = ((uint32_t)TLV5614_NLADC<<16)
#define TLV5614_NLDAC_DIS()	TLV5614_NLADC_BSRR = TLV5614_NLADC
		
void TLV5614_PortInit(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	
	/* Configure control pins in Output Push-Pull mode */
	GPIO_InitStructure.GPIO_Pin 	= TLV5614_NCS | TLV5614_FS;
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin 	= TLV5614_NLADC;
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_Out_PP;
	GPIO_Init(GPIOE, &GPIO_InitStructure);

}


/*****************************
 * clk=Fosc/64 
 * SPI MASTER
 * MSB FIRST
 * CPOL = 1;CPHA = 0;
 *
*******************************/
void TLV5614_ConfigSPI(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	SPI_InitTypeDef    SPI_InitStructure;

  	/* Enable GPIOA clock */
  	RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);

	/* Configure SPI2 pins: SCK, MISO and MOSI */
	GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	
	/* SPI2 disable */
	SPI_Cmd(SPI2, DISABLE);
	
	/* Enable SPI2 clock  */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
	
	/* SPI2 Config */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStructure.SPI_Mode 		= SPI_Mode_Master;
	SPI_InitStructure.SPI_DataSize 	= SPI_DataSize_16b;
	SPI_InitStructure.SPI_CPOL 		= SPI_CPOL_High;
	SPI_InitStructure.SPI_CPHA 		= SPI_CPHA_1Edge;
	SPI_InitStructure.SPI_NSS 		= SPI_NSS_Soft;
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
	SPI_InitStructure.SPI_FirstBit 	= SPI_FirstBit_MSB;
	SPI_InitStructure.SPI_CRCPolynomial = 7;
	SPI_Init(SPI2, &SPI_InitStructure);
	
	/* SPI2 enable */
	SPI_Cmd(SPI2, ENABLE);
}


void TLV5614_short_delay(void)
{
	#define SPI_DAC_DELAY	100
	volatile uint32_t i;
	
	for(i=0;i<SPI_DAC_DELAY;i++);
}

void TLV5614_load_dac()
{
	TLV5614_NLDAC_EN();
	TLV5614_short_delay();
	TLV5614_NLDAC_DIS();
}

void TLV5614_powerdown()
{
	TLV5614_CS_EN();	TLV5614_short_delay();
	TLV5614_FS_LOW();	TLV5614_short_delay();
	
	SPI_Write(SPI2, (1<<13));	TLV5614_short_delay();
	
	TLV5614_FS_HIGH();	TLV5614_short_delay();
	TLV5614_CS_DIS();	TLV5614_short_delay();
	TLV5614_load_dac();
}

void TLV5614_init()
{
	TLV5614_PortInit();
	TLV5614_ConfigSPI();
//	TLV5614_powerdown();
}


void TLV5614_set_out(uint8_t ch ,uint16_t dac)
{
	uint16_t tdat;

	if ( ch >= DAC_CHANNEL )
		return;
	
	TLV5614_CS_EN();	TLV5614_short_delay();
	TLV5614_FS_LOW();	TLV5614_short_delay();
	
	tdat = (((uint16_t)ch<<14) | (dac&0x0FFF));
	SPI_Write( SPI2, tdat );	TLV5614_short_delay();
	
	TLV5614_FS_HIGH();	TLV5614_short_delay();
	TLV5614_CS_DIS();	TLV5614_short_delay();
	TLV5614_load_dac();
}

void dac_set_mv(uint8_t ch ,uint16_t mv)
{
	uint16_t reg_value = ((uint32_t)mv * (1<<DAC_BITS) / DAC_VREF / 2);
	
	TLV5614_set_out(ch , reg_value);
}


